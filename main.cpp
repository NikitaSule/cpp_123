#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>
using namespace std;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
void printHeader(const string& title) {
    cout << "\n[ - - - " << title << " - - - ]\n";
}

// ==================== –ó–ê–î–ê–ù–ò–ï 1 ====================
class Shape1 {
public:
    virtual double area() const = 0;
    virtual void printInfo() const = 0;
    virtual ~Shape1() {}
};

class Circle : public Shape1 {
    double radius;
public:
    Circle(double r) : radius(r) {}
    double area() const override { return 3.14159 * radius * radius; }
    void printInfo() const override {
        cout << "‚óã –ö—Ä—É–≥: —Ä–∞–¥–∏—É—Å = " << radius 
             << ", –ø–ª–æ—â–∞–¥—å = " << fixed << setprecision(2) << area() << endl;
    }
};

class Rectangle : public Shape1 {
    double width, height;
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    double area() const override { return width * height; }
    void printInfo() const override {
        cout << "‚ñ° –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: " << width << " x " << height 
             << ", –ø–ª–æ—â–∞–¥—å = " << area() << endl;
    }
};

void task1() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 1: –§–∏–≥—É—Ä—ã (–ø–ª–æ—â–∞–¥—å)");
    vector<Shape1*> shapes = {
        new Circle(5),
        new Rectangle(4, 6)
    };
    
    for (auto shape : shapes) {
        shape->printInfo();
        delete shape;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 2 ====================
class Animal {
public:
    virtual void sound() const = 0;
    virtual void info() const = 0;
    virtual ~Animal() {}
};

class Dog : public Animal {
public:
    void sound() const override { cout << "–ì–∞–≤!"; }
    void info() const override { cout << "üê∂ –°–æ–±–∞–∫–∞: "; sound(); cout << endl; }
};

class Cat : public Animal {
public:
    void sound() const override { cout << "–ú—è—É!"; }
    void info() const override { cout << "üê± –ö–æ—à–∫–∞: "; sound(); cout << endl; }
};

void task2() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 2: –ñ–∏–≤–æ—Ç–Ω—ã–µ");
    vector<Animal*> animals = {
        new Dog(),
        new Cat()
    };
    
    for (auto animal : animals) {
        animal->info();
        delete animal;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 3 ====================
class Employee {
public:
    virtual double calculateSalary() const = 0;
    virtual void printInfo() const = 0;
    virtual ~Employee() {}
};

class FullTimeEmployee : public Employee {
    double monthlySalary;
public:
    FullTimeEmployee(double salary) : monthlySalary(salary) {}
    double calculateSalary() const override { return monthlySalary; }
    void printInfo() const override {
        cout << "üëî –ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å: –∑–∞—Ä–ø–ª–∞—Ç–∞ = " << calculateSalary() << endl;
    }
};

class PartTimeEmployee : public Employee {
    double hourlyRate;
    int hours;
public:
    PartTimeEmployee(double rate, int h) : hourlyRate(rate), hours(h) {}
    double calculateSalary() const override { return hourlyRate * hours; }
    void printInfo() const override {
        cout << "‚è± –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å: —Å—Ç–∞–≤–∫–∞ = " << hourlyRate 
             << ", —á–∞—Å—ã = " << hours << ", –∑–∞—Ä–ø–ª–∞—Ç–∞ = " << calculateSalary() << endl;
    }
};

void task3() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 3: –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏");
    vector<Employee*> employees = {
        new FullTimeEmployee(5000),
        new PartTimeEmployee(20, 80)
    };
    
    for (auto emp : employees) {
        emp->printInfo();
        delete emp;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 4 ====================
class Vehicle {
public:
    virtual void move() const = 0;
    virtual void info() const = 0;
    virtual ~Vehicle() {}
};

class Car : public Vehicle {
public:
    void move() const override { cout << "–µ–¥–µ—Ç –ø–æ –¥–æ—Ä–æ–≥–µ"; }
    void info() const override { cout << "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: "; move(); cout << endl; }
};

class Bike : public Vehicle {
public:
    void move() const override { cout << "–∫—Ä—É—Ç–∏—Ç –ø–µ–¥–∞–ª–∏"; }
    void info() const override { cout << "üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥: "; move(); cout << endl; }
};

void task4() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 4: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç");
    vector<Vehicle*> vehicles = {
        new Car(),
        new Bike()
    };
    
    for (auto v : vehicles) {
        v->info();
        delete v;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 5 ====================
class Account {
protected:
    double balance;
public:
    Account(double b) : balance(b) {}
    virtual void withdraw(double amount) = 0;
    virtual void printBalance() const = 0;
    virtual ~Account() {}
};

class SavingsAccount : public Account {
public:
    SavingsAccount(double b) : Account(b) {}
    void withdraw(double amount) override {
        if (balance - amount >= 0) balance -= amount;
    }
    void printBalance() const override {
        cout << "üí∞ –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç: –±–∞–ª–∞–Ω—Å = " << balance << endl;
    }
};

class CheckingAccount : public Account {
public:
    CheckingAccount(double b) : Account(b) {}
    void withdraw(double amount) override {
        balance -= amount;
    }
    void printBalance() const override {
        cout << "üí≥ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: –±–∞–ª–∞–Ω—Å = " << balance << endl;
    }
};

void task5() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 5: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞");
    vector<Account*> accounts = {
        new SavingsAccount(1000),
        new CheckingAccount(1000)
    };
    
    for (auto acc : accounts) {
        cout << "–î–æ —Å–Ω—è—Ç–∏—è: ";
        acc->printBalance();
        acc->withdraw(200);
        cout << "–ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è 200: ";
        acc->printBalance();
        delete acc;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 6 ====================
class Shape2 {
public:
    virtual void draw() const = 0;
    virtual void info() const = 0;
    virtual ~Shape2() {}
};

class Triangle : public Shape2 {
public:
    void draw() const override { cout << "‚ñ≤"; }
    void info() const override { 
        cout << "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: "; 
        draw(); 
        cout << " (3 —Å—Ç–æ—Ä–æ–Ω—ã)" << endl; 
    }
};

class Square : public Shape2 {
public:
    void draw() const override { cout << "‚ñ†"; }
    void info() const override { 
        cout << "–ö–≤–∞–¥—Ä–∞—Ç: "; 
        draw(); 
        cout << " (4 —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)" << endl; 
    }
};

void task6() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 6: –§–∏–≥—É—Ä—ã (—Ä–∏—Å–æ–≤–∞–Ω–∏–µ)");
    vector<Shape2*> shapes = {
        new Triangle(),
        new Square()
    };
    
    for (auto shape : shapes) {
        shape->info();
        delete shape;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 7 ====================
class Media {
public:
    virtual void play() const = 0;
    virtual void info() const = 0;
    virtual ~Media() {}
};

class Audio : public Media {
public:
    void play() const override { cout << "‚ô´ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞—É–¥–∏–æ"; }
    void info() const override { 
        cout << "üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª: "; 
        play(); 
        cout << " (—Ñ–æ—Ä–º–∞—Ç: MP3)" << endl; 
    }
};

class Video : public Media {
public:
    void play() const override { cout << "‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–∏–¥–µ–æ"; }
    void info() const override { 
        cout << "üé¨ –í–∏–¥–µ–æ—Ñ–∞–π–ª: "; 
        play(); 
        cout << " (—Ñ–æ—Ä–º–∞—Ç: MP4)" << endl; 
    }
};

void task7() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 7: –ú–µ–¥–∏–∞");
    vector<Media*> media = {
        new Audio(),
        new Video()
    };
    
    for (auto m : media) {
        m->info();
        delete m;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 8 ====================
class Person {
public:
    virtual void introduce() const = 0;
    virtual void info() const = 0;
    virtual ~Person() {}
};

class Student : public Person {
public:
    void introduce() const override { cout << "–Ø —Å—Ç—É–¥–µ–Ω—Ç"; }
    void info() const override { 
        cout << "üéì –°—Ç—É–¥–µ–Ω—Ç: "; 
        introduce(); 
        cout << " (—É—á–∏—Ç—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ)" << endl; 
    }
};

class Teacher : public Person {
public:
    void introduce() const override { cout << "–Ø —É—á–∏—Ç–µ–ª—å"; }
    void info() const override { 
        cout << "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å: "; 
        introduce(); 
        cout << " (–ø—Ä–µ–ø–æ–¥–∞–µ—Ç –≤ —à–∫–æ–ª–µ)" << endl; 
    }
};

void task8() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 8: –õ—é–¥–∏");
    vector<Person*> people = {
        new Student(),
        new Teacher()
    };
    
    for (auto p : people) {
        p->info();
        delete p;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 9 ====================
class Shape3 {
public:
    virtual double perimeter() const = 0;
    virtual void printInfo() const = 0;
    virtual ~Shape3() {}
};

class Ellipse : public Shape3 {
    double a, b;
public:
    Ellipse(double a, double b) : a(a), b(b) {}
    double perimeter() const override {
        return 2 * 3.14159 * sqrt((a*a + b*b) / 2);
    }
    void printInfo() const override {
        cout << "‚¨≠ –≠–ª–ª–∏–ø—Å: a = " << a << ", b = " << b 
             << ", –ø–µ—Ä–∏–º–µ—Ç—Ä ‚âà " << fixed << setprecision(2) << perimeter() << endl;
    }
};

class Polygon : public Shape3 {
    int sides;
    double length;
public:
    Polygon(int s, double l) : sides(s), length(l) {}
    double perimeter() const override { return sides * length; }
    void printInfo() const override {
        cout << "‚¨¢ –ú–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫: —Å—Ç–æ—Ä–æ–Ω = " << sides 
             << ", –¥–ª–∏–Ω–∞ = " << length 
             << ", –ø–µ—Ä–∏–º–µ—Ç—Ä = " << perimeter() << endl;
    }
};

void task9() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 9: –§–∏–≥—É—Ä—ã (–ø–µ—Ä–∏–º–µ—Ç—Ä)");
    vector<Shape3*> shapes = {
        new Ellipse(5, 3),
        new Polygon(6, 4)
    };
    
    for (auto shape : shapes) {
        shape->printInfo();
        delete shape;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 10 ====================
class Book {
public:
    virtual void getInfo() const = 0;
    virtual void printFullInfo() const = 0;
    virtual ~Book() {}
};

class EBook : public Book {
public:
    void getInfo() const override { cout << "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞"; }
    void printFullInfo() const override { 
        cout << "üì± "; 
        getInfo(); 
        cout << " (—Ñ–æ—Ä–º–∞—Ç—ã: PDF, EPUB)" << endl; 
    }
};

class PrintedBook : public Book {
public:
    void getInfo() const override { cout << "–ü–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞"; }
    void printFullInfo() const override { 
        cout << "üìñ "; 
        getInfo(); 
        cout << " (–ø–µ—Ä–µ–ø–ª–µ—Ç: —Ç–≤–µ—Ä–¥—ã–π/–º—è–≥–∫–∏–π)" << endl; 
    }
};

void task10() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 10: –ö–Ω–∏–≥–∏");
    vector<Book*> books = {
        new EBook(),
        new PrintedBook()
    };
    
    for (auto b : books) {
        b->printFullInfo();
        delete b;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 11 ====================
class Appliance {
public:
    virtual void turnOn() const = 0;
    virtual void info() const = 0;
    virtual ~Appliance() {}
};

class WashingMachine : public Appliance {
public:
    void turnOn() const override { cout << "–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç–∏—Ä–∫–∞"; }
    void info() const override { 
        cout << "üß∫ –°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞: "; 
        turnOn(); 
        cout << " (—Ä–µ–∂–∏–º—ã: —Ö–ª–æ–ø–æ–∫, —à–µ—Ä—Å—Ç—å)" << endl; 
    }
};

class Refrigerator : public Appliance {
public:
    void turnOn() const override { cout << "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"; }
    void info() const override { 
        cout << "‚ùÑ –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫: "; 
        turnOn(); 
        cout << " (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: -18¬∞C)" << endl; 
    }
};

void task11() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 11: –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞");
    vector<Appliance*> appliances = {
        new WashingMachine(),
        new Refrigerator()
    };
    
    for (auto a : appliances) {
        a->info();
        delete a;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 12 ====================
class Game {
public:
    virtual void play() const = 0;
    virtual void gameInfo() const = 0;
    virtual ~Game() {}
};

class BoardGame : public Game {
public:
    void play() const override { cout << "–ò–≥—Ä–∞–µ–º –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—É—é –∏–≥—Ä—É"; }
    void gameInfo() const override { 
        cout << "üé≤ "; 
        play(); 
        cout << " (–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω–æ–ø–æ–ª–∏—è)" << endl; 
    }
};

class VideoGame : public Game {
public:
    void play() const override { cout << "–ò–≥—Ä–∞–µ–º –≤ –≤–∏–¥–µ–æ–∏–≥—Ä—É"; }
    void gameInfo() const override { 
        cout << "üéÆ "; 
        play(); 
        cout << " (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: PC/–∫–æ–Ω—Å–æ–ª—å)" << endl; 
    }
};

void task12() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 12: –ò–≥—Ä—ã");
    vector<Game*> games = {
        new BoardGame(),
        new VideoGame()
    };
    
    for (auto g : games) {
        g->gameInfo();
        delete g;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 13 ====================
class Shape4 {
public:
    virtual double volume() const = 0;
    virtual void printInfo() const = 0;
    virtual ~Shape4() {}
};

class Sphere : public Shape4 {
    double radius;
public:
    Sphere(double r) : radius(r) {}
    double volume() const override {
        return (4.0/3.0) * 3.14159 * radius * radius * radius;
    }
    void printInfo() const override {
        cout << "üîµ –°—Ñ–µ—Ä–∞: —Ä–∞–¥–∏—É—Å = " << radius 
             << ", –æ–±—ä–µ–º = " << fixed << setprecision(2) << volume() << endl;
    }
};

class Cube : public Shape4 {
    double side;
public:
    Cube(double s) : side(s) {}
    double volume() const override { return side * side * side; }
    void printInfo() const override {
        cout << "üü¶ –ö—É–±: —Å—Ç–æ—Ä–æ–Ω–∞ = " << side 
             << ", –æ–±—ä–µ–º = " << volume() << endl;
    }
};

void task13() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 13: –û–±—ä–µ–º–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã");
    vector<Shape4*> shapes = {
        new Sphere(5),
        new Cube(4)
    };
    
    for (auto shape : shapes) {
        shape->printInfo();
        delete shape;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 14 ====================
class Device {
public:
    virtual void powerOn() const = 0;
    virtual void info() const = 0;
    virtual ~Device() {}
};

class Smartphone : public Device {
public:
    void powerOn() const override { cout << "–°–º–∞—Ä—Ç—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω"; }
    void info() const override { 
        cout << "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω: "; 
        powerOn(); 
        cout << " (–û–°: Android/iOS)" << endl; 
    }
};

class Laptop : public Device {
public:
    void powerOn() const override { cout << "–ù–æ—É—Ç–±—É–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"; }
    void info() const override { 
        cout << "üíª –ù–æ—É—Ç–±—É–∫: "; 
        powerOn(); 
        cout << " (–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel/AMD)" << endl; 
    }
};

void task14() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 14: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
    vector<Device*> devices = {
        new Smartphone(),
        new Laptop()
    };
    
    for (auto d : devices) {
        d->info();
        delete d;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 15 ====================
class Furniture {
public:
    virtual void assemble() const = 0;
    virtual void info() const = 0;
    virtual ~Furniture() {}
};

class Chair : public Furniture {
public:
    void assemble() const override { cout << "–°—Ç—É–ª —Å–æ–±—Ä–∞–Ω"; }
    void info() const override { 
        cout << "ü™ë –°—Ç—É–ª: "; 
        assemble(); 
        cout << " (–º–∞—Ç–µ—Ä–∏–∞–ª: –¥–µ—Ä–µ–≤–æ/–º–µ—Ç–∞–ª–ª)" << endl; 
    }
};

class Table : public Furniture {
public:
    void assemble() const override { cout << "–°—Ç–æ–ª —Å–æ–±—Ä–∞–Ω"; }
    void info() const override { 
        cout << "ü™ì –°—Ç–æ–ª: "; 
        assemble(); 
        cout << " (—Ä–∞–∑–º–µ—Ä: 120x80 —Å–º)" << endl; 
    }
};

void task15() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 15: –ú–µ–±–µ–ª—å");
    vector<Furniture*> furniture = {
        new Chair(),
        new Table()
    };
    
    for (auto f : furniture) {
        f->info();
        delete f;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 16 ====================
class Tool {
public:
    virtual void use() const = 0;
    virtual void toolInfo() const = 0;
    virtual ~Tool() {}
};

class Hammer : public Tool {
public:
    void use() const override { cout << "–ó–∞–±–∏–≤–∞–µ–º –≥–≤–æ–∑–¥–∏"; }
    void toolInfo() const override { 
        cout << "üî® –ú–æ–ª–æ—Ç–æ–∫: "; 
        use(); 
        cout << " (–≤–µ—Å: 500–≥)" << endl; 
    }
};

class Screwdriver : public Tool {
public:
    void use() const override { cout << "–ó–∞–∫—Ä—É—á–∏–≤–∞–µ–º –≤–∏–Ω—Ç—ã"; }
    void toolInfo() const override { 
        cout << "ü™õ –û—Ç–≤–µ—Ä—Ç–∫–∞: "; 
        use(); 
        cout << " (—Ç–∏–ø: –∫—Ä–µ—Å—Ç–æ–≤–∞—è)" << endl; 
    }
};

void task16() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 16: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã");
    vector<Tool*> tools = {
        new Hammer(),
        new Screwdriver()
    };
    
    for (auto t : tools) {
        t->toolInfo();
        delete t;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 17 ====================
class Plant {
public:
    virtual void grow() const = 0;
    virtual void plantInfo() const = 0;
    virtual ~Plant() {}
};

class Flower : public Plant {
public:
    void grow() const override { cout << "–¶–≤–µ—Ç–æ–∫ —Ä–∞—Å—Ç–µ—Ç –∏ —Ü–≤–µ—Ç–µ—Ç"; }
    void plantInfo() const override { 
        cout << "üå∑ –¶–≤–µ—Ç–æ–∫: "; 
        grow(); 
        cout << " (–ø–µ—Ä–∏–æ–¥ —Ü–≤–µ—Ç–µ–Ω–∏—è: –≤–µ—Å–Ω–∞)" << endl; 
    }
};

class Tree : public Plant {
public:
    void grow() const override { cout << "–î–µ—Ä–µ–≤–æ —Ä–∞—Å—Ç–µ—Ç –≤ –≤—ã—Å–æ—Ç—É"; }
    void plantInfo() const override { 
        cout << "üå≥ –î–µ—Ä–µ–≤–æ: "; 
        grow(); 
        cout << " (–≤—ã—Å–æ—Ç–∞: –¥–æ 10–º)" << endl; 
    }
};

void task17() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 17: –†–∞—Å—Ç–µ–Ω–∏—è");
    vector<Plant*> plants = {
        new Flower(),
        new Tree()
    };
    
    for (auto p : plants) {
        p->plantInfo();
        delete p;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 18 ====================
class Clothing {
public:
    virtual void wear() const = 0;
    virtual void clothingInfo() const = 0;
    virtual ~Clothing() {}
};

class Shirt : public Clothing {
public:
    void wear() const override { cout << "–ù–∞–¥–µ–≤–∞–µ–º —Ä—É–±–∞—à–∫—É"; }
    void clothingInfo() const override { 
        cout << "üëï –†—É–±–∞—à–∫–∞: "; 
        wear(); 
        cout << " (—Ä–∞–∑–º–µ—Ä: M)" << endl; 
    }
};

class Pants : public Clothing {
public:
    void wear() const override { cout << "–ù–∞–¥–µ–≤–∞–µ–º –±—Ä—é–∫–∏"; }
    void clothingInfo() const override { 
        cout << "üëñ –ë—Ä—é–∫–∏: "; 
        wear(); 
        cout << " (–¥–ª–∏–Ω–∞: 32)" << endl; 
    }
};

void task18() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 18: –û–¥–µ–∂–¥–∞");
    vector<Clothing*> clothes = {
        new Shirt(),
        new Pants()
    };
    
    for (auto c : clothes) {
        c->clothingInfo();
        delete c;
    }
}

// ==================== –ó–ê–î–ê–ù–ò–ï 19 ====================
class Sport {
public:
    virtual void play() const = 0;
    virtual void sportInfo() const = 0;
    virtual ~Sport() {}
};

class Football : public Sport {
public:
    void play() const override { cout << "–ò–≥—Ä–∞–µ–º –≤ —Ñ—É—Ç–±–æ–ª"; }
    void sportInfo() const override { 
        cout << "‚öΩ –§—É—Ç–±–æ–ª: "; 
        play(); 
        cout << " (–∏–≥—Ä–æ–∫–æ–≤: 11)" << endl; 
    }
};

class Basketball : public Sport {
public:
    void play() const override { cout << "–ò–≥—Ä–∞–µ–º –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª"; }
    void sportInfo() const override { 
        cout << "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: "; 
        play(); 
        cout << " (–∫–æ—Ä–∑–∏–Ω–∞ –Ω–∞ 3.05–º)" << endl; 
    }
};

void task19() {
    printHeader("–ó–∞–¥–∞–Ω–∏–µ 19: –°–ø–æ—Ä—Ç");
    vector<Sport*> sports = {
        new Football(),
        new Basketball()
    };
    
    for (auto s : sports) {
        s->sportInfo();
        delete s;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
int main() {
    cout << "=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ –≤ C++ ===\n";
    cout << "=== –í—Å–µ–≥–æ 19 –∑–∞–¥–∞–Ω–∏–π ===\n\n";
    
    task1();  // –§–∏–≥—É—Ä—ã (–ø–ª–æ—â–∞–¥—å)
    task2();  // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    task3();  // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    task4();  // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    task5();  // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞
    task6();  // –§–∏–≥—É—Ä—ã (—Ä–∏—Å–æ–≤–∞–Ω–∏–µ)
    task7();  // –ú–µ–¥–∏–∞
    task8();  // –õ—é–¥–∏
    task9();  // –§–∏–≥—É—Ä—ã (–ø–µ—Ä–∏–º–µ—Ç—Ä)
    task10(); // –ö–Ω–∏–≥–∏
    task11(); // –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    task12(); // –ò–≥—Ä—ã
    task13(); // –û–±—ä–µ–º–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
    task14(); // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    task15(); // –ú–µ–±–µ–ª—å
    task16(); // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    task17(); // –†–∞—Å—Ç–µ–Ω–∏—è
    task18(); // –û–¥–µ–∂–¥–∞
    task19(); // –°–ø–æ—Ä—Ç
    
    cout << "\n=== –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! ===\n";
    return 0;
}